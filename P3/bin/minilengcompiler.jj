/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;
  //debug_parser = true;
  ignore_case =true;}PARSER_BEGIN(minilengcompiler)

import java.io.FileInputStream;


public class minilengcompiler{
  static int n_ident = 0;  public static void main(String args []) throws ParseException, MiTokenMgrError  {
	Boolean verboso = args.length > 1 && args[1] == "-v"; // Es verboso si tenemos dos argumentos y el segundo es "-v"
	try { // Por si no existe el fichero
		FileInputStream fi = new FileInputStream(args[0]);
		minilengcompiler parser = new minilengcompiler(fi);		//      System.out.print("Escribe el nombre del fichero a analizar : ");
		try { 
			minilengcompiler.programa();
		}
	      catch (TokenMgrError e)
	      { // No he conseguido que lance MiTokenMgrError en lugar de TokenMgrError
			// System.out.println(e.getMessage()); // Esto funcionaria si lanzase MiTokenMgrError
			
			// En su lugar, obtenemos los valores de columna, linea y el ultimo token de SimpleCharStream:
			System.out.println("ERROR LÉXICO (<" + SimpleCharStream.getBeginLine() + ", " + SimpleCharStream.getBeginColumn() +
					">): símbolo no reconocido: <" + SimpleCharStream.GetImage().charAt(0) + ">"); 
					// charAt(0) porque siempre es el primer caracter del ultimo token consumido
		  }
	       
	 }
	 catch (Exception e) {
		System.out.println("No se ha encontrado el fichero " + args[1]);
	 }
	 // Resumen
	 if (verboso) { 
	 System.out.println(resumenTokens());
	}	  	}

	public static String resumenTokens() {
		return "Número de identificadores: " + n_ident;

	}


	// Muestra por pantalla un error sintáctico. Especifica línea y columna, el símbolo que ha obtenido y el que esperaba:
	private static void errorSintactico(ParseException e, String esperaba) {
        Token ultimo = minilengcompiler.getNextToken(); // el del error es el siguiente, ya que no ha hecho match todavía
        if (!esperaba.isEmpty()) { // si <esperaba> no está vacía, la completamos para la string final:
			esperaba = ". Esperaba " + esperaba;
        }
        else {
			esperaba = ". Error desconocido"; 
			// Aquí se puede personalizar un mensaje para los errores sintácticos inesperados (no debería darse nunca)
        }
	    System.out.println("ERROR SINTÁCTICO (<" + ultimo.beginLine + ", " + ultimo.beginColumn +
	    	">): Símbolo obtenido: <" + ultimo.image + ">" + esperaba + ".");
	    	
    }

	// Modo de pánico, ignora la entrada hasta encontrar un token de tipo <tipoSeguro> o el EOF.
	// Implementación basada en la documentación de JavaCC: https://javacc.github.io/javacc/tutorials/error-handling.html
	// (el parámetro tipoSeguro puede ser el identificador de un token del léxico, por ej PUNTOCOMA, ya que es un entero)
    private static void panicMode(ParseException e, int tipoSeguro) {
		  Token t;
		  errorSintactico(e, "<;> (PANIC MODE)"); // mostramos el origen del error
		  do {
		    t = getNextToken();
		  }
		  while (t.kind != tipoSeguro && t.kind != EOF); // e ignoramos la entrada hasta el siguiente token seguro


			
		    	}}PARSER_END(minilengcompiler)// < * > para que se aplique a todos los lexical states< * > SKIP :{  " "| "\r"| "\t"| "\n"
| < ("%") (~["\n"])* ("\n") > // Comentario de una linea, empieza por % y acaba con el salto de linea}


TOKEN : /* Cadenas de car antes de lo demás (pueden tener cualquier cosa dentro) */ 
{
  < #COMILLAS : "\"" >
  // Un caracter entre comillas:
| < CONSTCAR : < COMILLAS > ~["\""] < COMILLAS > > 
  // Una cadena entre comillas:
| < CONSTCAD : (< COMILLAS >) (~["\""])* (< COMILLAS >) > 
}
TOKEN : /* Operadores */ {  < MAS : "+" >| < MENOS : "-" >| < MULT : "*" >| < DIVIDIR : "/" >

| < MOD : "mod" >
| < DIV : "div" >

| < AND : "and" >
| < OR : "or" >
| < NOT : "not" >

| < IGUAL : "=" >
| < MENIGUAL : "<=" >
| < MAYIGUAL : ">=" >
| < MENOR : "<" >
| < MAYOR : ">" >
| < DISTINTO : "<>" >

| < ABRIRPAR : "(" >
| < CERRARPAR : ")" >

| < ASIGNAR : ":=" >
| < PUNTOCOMA : ";" >
| < COMA : "," >}

TOKEN : // Reservadas
{
  < PROGRAMA : "programa" >
| < PRINCIPIO : "principio" >
| < FIN : "fin" >
| < CAR : "caracter" >
| < BOOL : "booleano" >
| < ENT : "entero" >
| < ACCION : "accion" >
| < VAL : "val" >
| < REF: "ref" >

| < MIENTRAS: "mq" >
| < FINMIENTRAS: "FMq" >
| < SI : "si" >
| < SINO : "si_no" >
| < FINSI : "Fsi" >
| < ENTONCES: "ent" >

| < ENTACAR : "entacar" >
| < CARAENT : "caraent" >

| < LEER : "leer" >
| < ESCRIBIR : "escribir" >

//| < CLASE : "Clase" >
//| < METODO : "Metodo" >
//| < TIPO : ("entero")|("decimal") >
}

TOKEN : // Valores{
 < TRUE : "true" >
| < FALSE : "false" >| < CONSTENT : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >
| < VALOR_DECIMAL : ("-")? (< DIGIT >)+"."(< DIGIT >)+ >
| < #LETRA : ["a"-"z"] >
| < #ALFANUM: (< LETRA > | < DIGIT >) >
| < IDENTIFICADOR : ( < LETRA > | ("_")) ( < ALFANUM > | ("_") )* (< ALFANUM >)
				  | (< LETRA >) >
// No empieza por num y no acaba por '_': (Letra/_ (Letra/_/num)* Letra/num) | Letra
				  {
				    //System.out.println("Reconocido identificador: " + matchedToken);
				    minilengcompiler.n_ident++;
				  }}

/************************************************************/
/* Gramática:												*/
/************************************************************/
int programa() :{}{
  try {
      directiva_programa() identificador() puntocoma()
	  declaracion_variables() declaracion_acciones() bloque_sentencias()
	  < EOF > // EOF predefinido, para usar ficheros
  }
  catch (ParseException e) {
	errorSintactico(e, "");
  }  {    return 0;  }}


// Separamos todos los terminales en funciones aparte para permitir mayor detalle en los errores:
void directiva_programa() :
{}
{
  try {
      < PROGRAMA >
  }
  catch (ParseException e) {
	errorSintactico(e, "<programa>");
  }
}

void identificador() :
{}
{
  try {
      < IDENTIFICADOR >
  }
  catch (ParseException e) {
	errorSintactico(e, "un identificador");
  }
}


void puntocoma() :
{}
{
  try {
      ";"
  }
  catch (ParseException e) {
	//errorSintactico(e, "<;>");
	panicMode(e, PUNTOCOMA); // ignora hasta el siguiente ";" o EOF
  }
}
  
void declaracion_variables() :
{}
{ 
  (declaracion() puntocoma())*

}
void declaracion() :
{}
{
	  tipo_variables() identificadores()
}

void tipo_variables() :
{}
{
  try {
	(< ENT > | < CAR > | < BOOL >)
  }
  catch (ParseException e) {
	minilengcompiler.errorSintactico(e, "un tipo de variable (<entero>, <caracter> o <booleano>)");
  }
}

void identificadores() :
{}
{
	identificador() (coma() identificador())* 
}

void coma() :
{}
{
  try {
	","
  }
  catch (ParseException e) {
	minilengcompiler.errorSintactico(e, "<,>");
  }
}

void declaracion_acciones() :
{}
{
	(declaracion_accion())*
}

void declaracion_accion() :
{}
{
  try {
	cabecera_accion() puntocoma() declaracion_variables() declaracion_acciones() bloque_sentencias()
  }
  catch (ParseException e) { // un error a este nivel puede ser solucionado con cualquiera de estas opciones:
	minilengcompiler.errorSintactico(e, "un tipo de variable (<entero>, <caracter> o <booleano>), <accion> o <principio>");
  }
  
	
}

void cabecera_accion() :
{}
{
	accion() identificador() parametros_formales()
}

void accion() :
{}
{
  try {
	< ACCION >
  }
  catch (ParseException e) {
	minilengcompiler.errorSintactico(e, "<accion>");
  }
}


void parametros_formales() :
{}
{	// Si no hay parametros pueden omitirse los parentesis:
	(abrir_par() (lista_parametros())? cerrar_par())?
}

void abrir_par() :
{}
{
  try {
	"(" 
  }
  catch (ParseException e) {
	minilengcompiler.errorSintactico(e, "<(>");
  }
}

void cerrar_par() :
{}
{
  try {
	")" 
  }
  catch (ParseException e) {
	minilengcompiler.errorSintactico(e, "<)>");
  }
}


void lista_parametros() :
{}
{	// uno o más
	parametros() (puntocoma() parametros())*
}

void parametros() :
{}
{   // Original : clase_parametros tipo_variables lista_parametros
	clase_parametros() tipo_variables() identificadores()
}


void clase_parametros() :
{}
{	
  try {
	< VAL > | < REF >
  }
  catch (ParseException e) {
	errorSintactico(e, "<val> o <ref>");
  }
}

void bloque_sentencias() :
{}
{
	 principio() lista_sentencias() fin()
}

void principio() :
{}
{
  try {
	< PRINCIPIO >
  }
  catch (ParseException e) {
	minilengcompiler.errorSintactico(e, "<principio>");
  }
}

void fin() :
{}
{
  try {
	< FIN >
  }
  catch (ParseException e) {
	minilengcompiler.errorSintactico(e, "<fin>");
  }
}


void lista_sentencias() :
{}
{ 	// Debe haber al menos una sentencia
	try { 
		(sentencia())+
	}
	catch (ParseException e) {
		minilengcompiler.errorSintactico(e, "sentencias. Debe haber al menos una");
  	}
	
}

void sentencia() :
{}
{ 
	leer() puntocoma() | escribir() puntocoma() | asignacion_o_invocacion() | seleccion() | mientras_que()
}

void leer() :
{}
{ 
	< LEER > abrir_par() lista_asignables() cerrar_par()
}

void lista_asignables() :
{}
{ 	// Debe recibir al menos uno, como identificadores:
	identificadores()
}

void escribir() :
{}
{ 
	< ESCRIBIR > abrir_par() lista_escribibles() cerrar_par()
}

void lista_escribibles() :
{}
{ 	
	escribible() (coma() escribible())*
}


void escribible() :
{}
{ 	// Se puede escribir cualquier expresion o una cadena de caracteres
	expresion() | < CONSTCAD >
}


void asignacion_o_invocacion() :
{}
{	// Para evitar el conflicto sin aumentar el lookahead
	identificador() (asignacion() | invocacion_accion()) puntocoma()
}


void asignacion() :
{}
{
	< ASIGNAR > expresion()
}

void invocacion_accion() :
{}
{
	(argumentos())?
}

void mientras_que() :
{}
{ 
	< MIENTRAS > expresion() lista_sentencias() fin_mientras()
}

void fin_mientras():
{}
{	
  try {
	< FINMIENTRAS >
  }
  catch (ParseException e) {
	errorSintactico(e, "<fmq>");
  }
}

void seleccion() :
{}
{ 	// si (condicion) ent (sentencias) (si_no)? fsi
	< SI > expresion() entonces() lista_sentencias() (si_no())? fin_si()
}

void entonces():
{}
{	
  try {
	< ENTONCES >
  }
  catch (ParseException e) {
	errorSintactico(e, "<ent>");
  }
}

void fin_si():
{}
{	
  try {
	< FINSI >
  }
  catch (ParseException e) {
	errorSintactico(e, "<fsi>");
  }
}


void si_no() :
{}
{ 	// si_no, sin condicion
	< SINO > lista_sentencias()
}

void argumentos() :
{}
{
	abrir_par() (lista_expresiones())? cerrar_par()
}

void lista_expresiones() :
{}
{ 
	expresion() (coma() expresion())*
}

void expresion() :
{}
{ 	// comparaciones de expresiones simples (sumas de multiplicaciones)
	expresion_simple() (operador_relacional() expresion_simple())*
}

void operador_relacional() :
{}
{ 	// Los de comparación
	< IGUAL > | < MENIGUAL > | < MAYIGUAL > | < MENOR > | < MAYOR > | < DISTINTO >  
}

void expresion_simple() :
{}
{ 	// "sumas" de "multiplicaciones" de factores (es decir, prioridad a multiplicación)
	termino() (operador_aditivo() termino())*
}

void operador_aditivo() :
{}
{ // +, - y or
	< MAS > | < MENOS > | < OR >
}

void termino() :
{}
{ // prioridad a multiplicativos: factor (mult factor)*
	factor() (operador_multiplicativo() factor())*
}

void operador_multiplicativo() :
{}
{ // *, div, mod y and
	< MULT > | < DIV > | < MOD > | < AND > 
}


void factor() :
{}
{ 	try { 
		"-" factor() | < NOT > factor() | abrir_par() expresion() cerrar_par()
		| < ENTACAR > abrir_par() expresion() cerrar_par() | < CARAENT > abrir_par() expresion() cerrar_par()
		| identificador() | < CONSTENT > | < CONSTCAR > // | < CONSTCAD > // las cadenas solo se pueden usar en la f. escribir (enunciado de la practica 2)
		| < TRUE > | < FALSE >
	}
	catch (ParseException e) {
		errorSintactico(e, "una expresión o constante");
  	}
}



